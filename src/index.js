import Bank from "./Bank.js";
import chalk from "chalk";
import Statement from "./Statement.js";

const bank = new Bank("Digital Futures Bank");
const demoAccount = bank.createAccount();
const demoAccount2 = bank.createAccount();

console.log(chalk.bgMagentaBright(`//------Initialising Banking application------//\n`));

console.log(`Welcome to ${bank.getName()} banking application.`);
console.log(chalk.bgCyan(`>The program allows usage for different banks/branches and also create multiple accounts under the bank with different IDs for each.\n`));
console.log(`Logging into account ID ${demoAccount.getAccountId()}.`);
console.log(`Deposit 500 on 2024-04-30.`);
console.log(demoAccount.deposit(500, '2024-04-30') && chalk.green(`The account balance is now ${demoAccount.getBalance()}.`));
console.log(`Deposit 800.`);
console.log(demoAccount.deposit(800) && chalk.green(`The account balance is now ${demoAccount.getBalance()}.`));
console.log(`Print bank statement...\n`);
console.log(Statement.printStatement(demoAccount));
console.log(chalk.bgCyan(`>The statement shows details on each transaction, including the date, amount credited or debited and the current account balance and prints in the order the transactions were made with the latest at the top. \nIf a date wasn't added with the transaction amount, today's date will automatically be used instead.\n`));
console.log(`Withdraw 1000.`);
console.log(demoAccount.withdraw(1000, '2024-06-30') ? chalk.green(`The account balance is now ${demoAccount.getBalance()}.`) : chalk.red(`There are insufficient funds on the account, balance fully withdrawn. The account balance is now ${demoAccount.getBalance()}.`));
console.log(`Withdraw 500.`);
console.log(!demoAccount.withdraw(500) && chalk.red(`There are insufficient funds on the account, balance fully withdrawn. The account balance is now ${demoAccount.getBalance()}.`))
console.log(`Print bank statement...\n`);
console.log(Statement.printStatement(demoAccount));
console.log(chalk.bgCyan(`>As the bank balance was insufficient, only the full bank balance was withdrawn and not the full amount requested since there wasn't an overdraft applied on the account.\n Our earlier transactions passed through dates which the program prints on the statement in the order the transactions were made. However future dates will still print in the program which in hindsight should be handled and an error thrown.\n`));
console.log(`Add an overdraft of 1000 on account.`);
console.log(demoAccount.addOverdraft(1000) ? chalk.green(`Overdraft added and set to ${demoAccount.getOverdraftLimit()}.`) : chalk.red(`Unable to set overdraft limit.`));
console.log(`Withdraw 500.`);
demoAccount.withdraw(500);
console.log(chalk.green(`The account balance is now ${demoAccount.getBalance()}.`));
console.log(chalk.bgCyan(`>As the account now has an overdraft added, we can now withdraw money past 0 and go into overdraft and produce a negative balance.\n`));
console.log(`Change the overdraft from 1000 to 400.`);
console.log(demoAccount.setOverdraft(400)? chalk.green(`Overdraft now set to ${demoAccount.getOverdraftLimit()}.`) : chalk.red(`Unable to set overdraft limit, current balance is higher than new limit.`));
console.log(chalk.bgCyan(`>As the current balance is higher than the requested overdraft limit, the system doesn't allow the limit to change.\n`));
console.log(`Change the overdraft from 1000 to 800.`);
console.log(demoAccount.setOverdraft(800) ? chalk.green(`Overdraft now set to ${demoAccount.getOverdraftLimit()}.`) : chalk.red(`Unable to set overdraft limit, current balance is lower than new limit.`));
console.log(`Withdraw 55`);
console.log(demoAccount.withdraw(55) ? chalk.green(`The account balance is now ${demoAccount.getBalance()}.`) : chalk.red(`Unable to retrieve full amount, current balance is lower than requested withdrawal. The account balance is now ${demoAccount.getBalance()}.`));
console.log(`Withdraw 400`);
console.log(demoAccount.withdraw(400) ? chalk.green(`The account balance is now ${demoAccount.getBalance()}.`) : chalk.red(`Unable to retrieve full amount, current balance is lower than requested withdrawal. The account balance is now ${demoAccount.getBalance()}.`));
console.log(`Print bank statement...\n`);
console.log(Statement.printStatement(demoAccount));
console.log(chalk.bgCyan(`>We were able to decrease the overdraft limit from 1000 and change it to a value that was slightly higher than the current balance and withdraw more funds from the account. \nHowever, when you try to withdraw more money than the overdraft limit, the system will only allow you to only withdraw up to your overdraft limit and stops when this value is reached. \nIt doesn't automatically increase, instead the customer would need to ask to increase their overdraft limit.\nThe bank balance in the statement also shows positive balances and credits in green and negative balances and debits in red.\n`));

console.log(chalk.bgMagentaBright(`\n//------BEGIN Banking application demo------//\n`));
console.log(`You have logged into Account ID ${demoAccount2.getAccountId()}.\n`);
console.log(`**Given** a client makes a deposit of 1000 on 10-01-2012`);
console.log(chalk.blue(`demoAccount2.deposit(1000, '2012-01-10')\n`));
demoAccount2.deposit(1000, '2012-01-10');
console.log(`**And** a deposit of 2000 on 13-01-2012`);
console.log(chalk.blue(`demoAccount2.deposit(2000, '2012-01-13')\n`));
demoAccount2.deposit(2000, '2012-01-13');
console.log(`**And** a withdrawal of 500 on 14-01-2012`);
console.log(chalk.blue(`demoAccount2.withdraw(500, '2012-01-14')\n`));
demoAccount2.withdraw(500, '2012-01-14');
console.log(`**When** she prints her bank statement`);
console.log(chalk.blue(`Statement.printStatement(demoAccount2)\n`));
console.log(`**Then** she would see \n`);
console.log(Statement.printStatement(demoAccount2));
console.log(chalk.bgMagenta(`\n//------END Banking application demo------//`));
